export default Logcat;
export type LogcatOpts = {
    /**
     * The log print format, where <format> is one of:
     * brief process tag thread raw time threadtime long
     * `threadtime` is the default value.
     */
    format?: string | undefined;
    /**
     * Series of `<tag>[:priority]`
     * where `<tag>` is a log component tag (or `*` for all) and priority is:
     * V    Verbose
     * D    Debug
     * I    Info
     * W    Warn
     * E    Error
     * F    Fatal
     * S    Silent (supress all output)
     *
     * `'*'` means `'*:d'` and `<tag>` by itself means `<tag>:v`
     *
     * If not specified on the commandline, filterspec is set from `ANDROID_LOG_TAGS`.
     * If no filterspec is found, filter defaults to `'*:I'`
     */
    filterSpecs?: string[] | undefined;
};
export type LogEntry = {
    timestamp: number;
    level: "ALL";
    message: string;
};
declare class Logcat extends EventEmitter<[never]> {
    constructor(opts?: {});
    adb: any;
    clearLogs: any;
    debug: any;
    debugTrace: any;
    maxBufferSize: any;
    /** @type {LRUCache<number, [string, number]>} */
    logs: LRUCache<number, [string, number]>;
    /** @type {number?} */
    logIndexSinceLastRequest: number | null;
    startCapture(opts?: {}): Promise<any>;
    proc: SubProcess | null | undefined;
    /**
     *
     * @param {string} logLine
     * @param {string} [prefix='']
     * @returns {void}
     */
    outputHandler(logLine: string, prefix?: string | undefined): void;
    /**
     *
     * @returns {Promise<void>}
     */
    stopCapture(): Promise<void>;
    /**
     * @returns {LogEntry[]}
     */
    getLogs(): LogEntry[];
    /**
     * @returns {LogEntry[]}
     */
    getAllLogs(): LogEntry[];
    /**
     * @returns {Promise<void>}
     */
    clear(): Promise<void>;
}
import { EventEmitter } from 'node:events';
import { LRUCache } from 'lru-cache';
import { SubProcess } from 'teen_process';
//# sourceMappingURL=logcat.d.ts.map